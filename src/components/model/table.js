// Generated by IcedCoffeeScript 1.4.0b
var Table,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Table = (function() {

  Table.prototype.position = {
    relative: {
      x: null,
      y: null
    },
    absolute: {
      x: null,
      y: null
    }
  };

  function Table(canvas, id, x, y, w, h) {
    var canvasMax, properties,
      _this = this;
    this.x = x;
    this.y = y;
    this.w = w != null ? w : 100;
    this.h = h != null ? h : 80;
    this.stopTable = __bind(this.stopTable, this);
    this.moveTable = __bind(this.moveTable, this);
    this.startTable = __bind(this.startTable, this);
    properties = {
      width: this.w,
      height: this.h,
      left: this.x,
      top: this.y
    };
    this.table = $('<div class="table"><input class="head" ></div>').css(properties).attr('id', id);
    this.table.appendTo(canvas);
    canvasMax = {
      maxX: (typeof canvas.width === "function" ? canvas.width() : void 0) || $(canvas).width(),
      maxY: (typeof canvas.height === "function" ? canvas.height() : void 0) || $(canvas).height()
    };
    this.table.on('mousedown', function(ev) {
      _this.startTable(ev);
      $(document).on('mousemove', canvasMax, _this.moveTable);
      return $(document).one('mouseup', function() {
        $(document).off('mousemove', _this.moveTable);
        return _this.stopTable();
      });
    });
  }

  Table.prototype.startTable = function(ev) {
    var position;
    position = this.table.position();
    this.position.relative = {
      x: position.left,
      y: position.top
    };
    return this.position.absolute = {
      x: ev.pageX,
      y: ev.pageY
    };
  };

  Table.prototype.moveTable = function(ev) {
    var newX, newY, xDiff, yDiff;
    this.table.addClass('move');
    xDiff = ev.pageX - this.position.absolute.x;
    yDiff = ev.pageY - this.position.absolute.y;
    newX = this.position.relative.x + xDiff;
    newY = this.position.relative.y + yDiff;
    if (newX < 0) {
      newX = 0;
    } else if (newX > ev.data.maxX - this.w) {
      newX = ev.data.maxX - this.w;
    }
    if (newY < 0) {
      newY = 0;
    } else if (newY > ev.data.maxY - this.h) {
      newY = ev.data.maxY - this.h;
    }
    return this.table.css({
      'left': newX,
      'top': newY
    });
  };

  Table.prototype.stopTable = function() {
    return this.table.removeClass('move');
  };

  /*createAnchors: (canvas) ->
  		lt = @table.head.attr ['x','y']
  		rb = 
  			x: @table.body.attr('x') + @table.body.attr('width')
  			y: @table.body.attr('y') + @table.body.attr('height')
  
  		for side in ['t','l','b','r']
  			@anchors[side] = new Anchor canvas, side, lt, rb
  */


  Table.prototype.show = function() {
    return this.table.all.show();
  };

  Table.prototype.hide = function() {
    return this.table.all.hide();
  };

  return Table;

})();

if (typeof window === "undefined" || window === null) module.exports = Table;
