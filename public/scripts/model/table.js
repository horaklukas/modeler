// Generated by CoffeeScript 1.6.2
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

goog.provide('dm.model.Table');

goog.require('tmpls.model');

goog.require('goog.dom');

goog.require('goog.dom.classes');

goog.require('goog.soy');

goog.require('goog.style');

goog.require('goog.math.Coordinate');

goog.require('goog.math.Vec2');

dm.model.Table = (function() {
  function Table(canvas, id, x, y, w, h) {
    var canvSize;

    this.x = x;
    this.y = y;
    this.w = w != null ? w : 100;
    this.h = h != null ? h : 80;
    this.stopTable = __bind(this.stopTable, this);
    this.moveTable = __bind(this.moveTable, this);
    this.startTable = __bind(this.startTable, this);
    this.graspTable = __bind(this.graspTable, this);
    canvSize = goog.style.getSize(canvas);
    if (x + this.w > canvSize.width) {
      this.x = canvSize.width - this.w;
    }
    if (y + this.h > canvSize.height) {
      this.y = canvSize.height - this.h;
    }
    this.position = new goog.math.Coordinate(this.x, this.y);
    this.relations = [];
    this.table = goog.soy.renderAsElement(tmpls.model.table, {
      'id': id
    });
    goog.style.setPosition(this.table, this.x, this.y);
    goog.dom.appendChild(canvas, this.table);
    goog.events.listen(this.table, goog.events.EventType.MOUSEDOWN, this.graspTable);
  }

  /**
   * Callback that is called when user grasp table with intent to move it
  */


  Table.prototype.graspTable = function(ev) {
    var pos;

    this.startTable();
    pos = goog.style.getPosition(this.table);
    this.position = new goog.math.Coordinate(pos.x, pos.y);
    this.offsetInTab = goog.style.getRelativePosition(ev, this.table);
    goog.events.listen(document, goog.events.EventType.MOUSEMOVE, this.moveTable);
    return goog.events.listenOnce(document, goog.events.EventType.MOUSEUP, this.stopTable);
  };

  Table.prototype.startTable = function() {};

  Table.prototype.moveTable = function(ev) {
    var canvas, canvasSize, offsetInCanvas, rel, _i, _len, _ref;

    goog.dom.classes.add(this.table, 'move');
    canvas = dm.ui.Canvas.getInstance().html;
    canvasSize = goog.style.getSize(canvas);
    offsetInCanvas = goog.style.getRelativePosition(ev, canvas);
    this.position = new goog.math.Coordinate(offsetInCanvas.x - this.offsetInTab.x, offsetInCanvas.y - this.offsetInTab.y);
    if (this.position.x < 0) {
      this.position.x = 0;
    } else if (this.position.x > canvasSize.width - this.w) {
      this.position.x = canvasSize.width - this.w;
    }
    if (this.position.y < 0) {
      this.position.y = 0;
    } else if (this.position.y > canvasSize.height - this.h) {
      this.position.y = canvasSize.height - this.h;
    }
    _ref = this.relations;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      rel = _ref[_i];
      rel.recountPosition();
    }
    return goog.style.setPosition(this.table, this.position.x, this.position.y);
  };

  Table.prototype.stopTable = function() {
    goog.dom.classes.remove(this.table, 'move');
    return goog.events.unlisten(document, goog.events.EventType.MOUSEMOVE, this.moveTable);
  };

  /**
   * @return {Object.<string,goog.math.Coordinate>}
  */


  Table.prototype.getConnPoints = function() {
    return {
      top: new goog.math.Coordinate(this.position.x + this.w / 2, this.position.y),
      right: new goog.math.Coordinate(this.position.x + this.w + 1, this.position.y + this.h / 2),
      bottom: new goog.math.Coordinate(this.position.x + this.w / 2, this.position.y + this.h + 1),
      left: new goog.math.Coordinate(this.position.x, this.position.y + this.h / 2)
    };
  };

  Table.prototype.addRelation = function(rel) {
    return this.relations.push(rel);
  };

  Table.prototype.setName = function(name) {
    var tableHead;

    this.name = name;
    tableHead = goog.dom.getElementsByTagNameAndClass(null, 'head', this.table)[0];
    return goog.dom.setTextContent(tableHead, name);
  };

  Table.prototype.getName = function() {
    return this.name;
  };

  /**
  	* Save table columns with all its attributes and render columns to table on
  	* canvas
  	*
  	* @param {Object.<string,*>} columns Table columns with its attributes
  */


  Table.prototype.setColumns = function(columns) {
    var tableBody;

    this.columns = columns;
    tableBody = goog.dom.getElementsByTagNameAndClass(null, 'body', this.table)[0];
    return goog.soy.renderElement(tableBody, tmpls.model.tabColumns, {
      cols: columns
    });
  };

  Table.prototype.getColumns = function() {
    return this.columns;
  };

  return Table;

})();

if (typeof window === "undefined" || window === null) {
  module.exports = Table;
}
