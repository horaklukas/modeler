// Generated by IcedCoffeeScript 1.4.0b
var Model,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Model = (function() {

  function Model(name) {
    this.addRelation = __bind(this.addRelation, this);
    this.editTable = __bind(this.editTable, this);
    this.addTable = __bind(this.addTable, this);    if (!name) throw new Error('Model name must be specified!');
    this.tables = [];
    this.relations = [];
  }

  /**
   * @returns {string} id of new table
  */


  Model.prototype.addTable = function(canvas, x, y) {
    var tabId;
    tabId = "tab_" + this.tables.length;
    this.tables.push(new Table(canvas, tabId, x, y, 100, 60));
    return tabId;
  };

  /**
   * Passed new values to table from table dialog
   * @param {string} id Identificator of table to edit
   * @param {string} name Name of table to set
   * @param {strin} columns
  */


  Model.prototype.editTable = function(id, name, columns) {
    return this.tables[this.getTabNumberId(id)].setName(name);
  };

  Model.prototype.addRelation = function(canvas, startTabId, endTabId) {
    var endTab, relLen, startTab;
    startTab = this.tables[this.getTabNumberId(startTabId)];
    endTab = this.tables[this.getTabNumberId(endTabId)];
    if (startTab !== void 0 && endTab !== void 0) {
      relLen = this.relations.push(new Relation(canvas, startTab, endTab));
      startTab.addRelation(this.relations[relLen - 1]);
      return endTab.addRelation(this.relations[relLen - 1]);
    } else {
      return false;
    }
  };

  Model.prototype.getTabNumberId = function(fullid) {
    var numberId;
    numberId = fullid.match(/^tab_(\d+)$/);
    if (numberId != null) {
      return Number(numberId[1]);
    } else {
      return false;
    }
  };

  return Model;

})();

if (typeof window === "undefined" || window === null) module.exports = Model;
