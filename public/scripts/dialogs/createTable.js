// Generated by IcedCoffeeScript 1.4.0c
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

goog.provide('dm.dialogs.CreateTableDialog');

goog.require('dm.dialogs.CommonDialog');

goog.require('tmpls.dialogs.createTable');

goog.require('goog.dom');

goog.require('goog.soy');

goog.require('goog.events');

goog.require('goog.dom.classes');

goog.require('goog.array');

dm.dialogs.CreateTableDialog = (function(_super) {

  __extends(CreateTableDialog, _super);

  function CreateTableDialog(types) {
    var addBtn, btns, cancBtn, click, okBtn,
      _this = this;
    this.types = types;
    this.confirm = __bind(this.confirm, this);
    this.removeColumn = __bind(this.removeColumn, this);
    this.addColumn = __bind(this.addColumn, this);
    CreateTableDialog.__super__.constructor.call(this, 'createTable', types);
    this.columnsCount = 0;
    this.nameField = goog.dom.getElement('table_name');
    this.colslist = goog.dom.getElement('columns_list');
    btns = goog.dom.getElementsByTagNameAndClass('button', null, this.colslist);
    addBtn = btns[0];
    click = goog.events.EventType.CLICK;
    goog.events.listen(addBtn, click, this.addColumn);
    goog.events.listen(this.colslist, click, function(e) {
      if (goog.dom.classes.has(e.target, 'delete')) {
        return _this.removeColumn(e.target);
      }
    });
    okBtn = goog.dom.getElementsByTagNameAndClass('button', 'ok', this.dialog);
    cancBtn = goog.dom.getElementsByTagNameAndClass('button', 'cancel', this.dialog);
    goog.events.listen(okBtn[0], click, this.confirm);
    goog.events.listen(cancBtn[0], click, this.hide);
  }

  /**
  	* Show the dialog window
  */


  CreateTableDialog.prototype.show = function(table) {
    this.relatedTable = table;
    return CreateTableDialog.__super__.show.call(this);
  };

  /**
  	* Return all `columns` in dialog that have filled name, columns with empty
  	* name are skipped
  	*
  	* @return {Array.<Object>} List of columns's objects, each object has
  	* property `name`, `type` and `pk`
  */


  CreateTableDialog.prototype.getColumns = function() {
    var cols, colsValues;
    cols = goog.dom.getElementsByTagNameAndClass(void 0, 'row', this.colslist);
    colsValues = goog.array.map(cols, function(elem) {
      var name, pkey, type;
      if (goog.dom.classes.has(elem, 'head')) return null;
      name = goog.dom.getElementsByTagNameAndClass(void 0, 'name', elem)[0];
      if ((name.value == null) || name.value === '') return null;
      type = goog.dom.getElementsByTagNameAndClass(void 0, 'type', elem)[0];
      pkey = goog.dom.getElementsByTagNameAndClass(void 0, 'pkey', elem)[0];
      return {
        name: name.value,
        type: type.value,
        pk: pkey.value
      };
    });
    return goog.array.filter(colsValues, function(elem) {
      return elem != null;
    });
  };

  /**
  	* Return table name, filled in dialog
  	*
  	* @return {string} Table name
  */


  CreateTableDialog.prototype.getName = function() {
    return this.nameField.value;
  };

  /**
  	* Set table values (name and columns) to dialog, used when editing table
  	*
  	* @param {string=} name
  	* @param {Array.<Object>=} cols
  */


  CreateTableDialog.prototype.setValues = function(name, cols) {
    var col, cols2set, oldcol, oldcols, _i, _j, _len, _len1, _ref, _results;
    if (name == null) name = '';
    if (cols == null) cols = [];
    goog.dom.setProperties(this.nameField, {
      'value': name
    });
    cols2set = cols.concat([
      {
        name: '',
        type: null,
        pk: false
      }
    ]);
    oldcols = goog.dom.getElementsByTagNameAndClass(void 0, 'row', this.colslist);
    _ref = goog.array.slice(oldcols, 1);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      oldcol = _ref[_i];
      goog.dom.removeNode(oldcol);
    }
    _results = [];
    for (_j = 0, _len1 = cols2set.length; _j < _len1; _j++) {
      col = cols2set[_j];
      _results.push(this.addColumn(col.name, col.type, col.pk));
    }
    return _results;
  };

  /**
  	* Add new `column` row to dialog, empty or set in depend if values are passed
  	*
  	* @param {string=} name
  	* @param {string=} type
  	* @param {boolean=} pk
  */


  CreateTableDialog.prototype.addColumn = function(name, type, pk) {
    var col, opts;
    opts = {
      types: this.types
    };
    if ((name != null) && typeof name === 'string') opts.name = name;
    if ((type != null) && typeof type === 'string') opts.colType = type;
    if (pk != null) opts.pkey = pk;
    col = goog.soy.renderAsElement(tmpls.dialogs.createTable.tableColumn, opts);
    goog.dom.appendChild(this.colslist, col);
    return this.columnsCount++;
  };

  CreateTableDialog.prototype.removeColumn = function(deleteBtn) {
    var columnRow;
    columnRow = goog.dom.getAncestorByClass(deleteBtn, 'row');
    if (this.columnsCount === 1) this.addColumn();
    goog.dom.removeNode(columnRow);
    return this.columnsCount--;
  };

  CreateTableDialog.prototype.onConfirm = function(cb) {
    return this.confirmCb = cb;
  };

  CreateTableDialog.prototype.confirm = function() {
    var columns, tabName;
    if (this.confirmCb != null) {
      tabName = this.getName();
      columns = this.getColumns();
      this.confirmCb(this.relatedTable, tabName, columns);
    }
    return this.hide();
  };

  return CreateTableDialog;

})(dm.dialogs.CommonDialog);
