// Generated by CoffeeScript 1.6.2
var createTableDialog,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

createTableDialog = (function(_super) {
  __extends(createTableDialog, _super);

  function createTableDialog(types) {
    this.types = types;
    this.confirm = __bind(this.confirm, this);
    this.addColumn = __bind(this.addColumn, this);
    createTableDialog.__super__.constructor.call(this, 'createTable', types);
    this.$name = $('[name=physical_name]', this.dialog);
    this.$colslist = $('#columns_list', this.dialog);
    $('button:first', this.$colslist).on('click', this.addColumn);
    this.dialog.on('click', 'button.ok', this.confirm);
    this.dialog.on('click', 'button.cancel', this.hide);
  }

  createTableDialog.prototype.show = function(table) {
    this.relatedTable = table;
    return createTableDialog.__super__.show.call(this);
  };

  createTableDialog.prototype.getColumns = function() {
    var $cols;

    $cols = $('.row:not(.head)', this.$colslist);
    return $.map($cols, function(elem, val) {
      var $this, name;

      $this = $(elem);
      name = $('[name=name]', $this).prop('value');
      if ((name == null) || name === '') {
        return null;
      } else {
        return {
          name: name,
          type: $('[name=type]', $this).prop('value'),
          pk: $('.pkey', $this).prop('checked')
        };
      }
    });
  };

  createTableDialog.prototype.setColumns = function(cols) {
    var col, _i, _len, _results;

    $('.row:not(.head)', this.$colslist).remove();
    _results = [];
    for (_i = 0, _len = cols.length; _i < _len; _i++) {
      col = cols[_i];
      _results.push(this.addColumn(col.name, col.pk));
    }
    return _results;
  };

  createTableDialog.prototype.addColumn = function(name, pk) {
    var opts;

    opts = {
      types: this.types
    };
    if ((name != null) && typeof name === 'string') {
      opts.name = name;
    }
    if (pk != null) {
      opts.pk = pk;
    }
    return this.$colslist.append(tmpls.dialogs.createTable.tableColumn(opts));
  };

  createTableDialog.prototype.onConfirm = function(cb) {
    return this.confirmCb = cb;
  };

  createTableDialog.prototype.confirm = function() {
    var columns, tabName;

    if (this.confirmCb != null) {
      tabName = this.$name.prop('value');
      columns = this.getColumns();
      this.confirmCb(this.relatedTable, tabName, columns);
    }
    return this.hide();
  };

  return createTableDialog;

})(CommonDialog);
