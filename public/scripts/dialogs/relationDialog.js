// Generated by IcedCoffeeScript 1.4.0c
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  goog.provide('dm.dialogs.RelationDialog');

  goog.provide('dm.dialogs.RelationDialog.Confirm');

  goog.require('goog.ui.Dialog');

  goog.require('tmpls.dialogs.createRelation');

  goog.require('goog.dom');

  goog.require('goog.soy');

  goog.require('goog.string');

  goog.require('goog.events');

  dm.dialogs.RelationDialog = (function(_super) {
    var EventType;

    __extends(RelationDialog, _super);

    EventType = {
      CONFIRM: goog.events.getUniqueId('dialog-confirmed')
    };

    function RelationDialog(types) {
      var content;
      this.types = types;
      this.onSelect = __bind(this.onSelect, this);
      this.swapParentChild = __bind(this.swapParentChild, this);
      this.setIdentifying = __bind(this.setIdentifying, this);
      RelationDialog.__super__.constructor.call(this);
      this.isIdentifying = false;
      this.relatedTables = {
        parent: null,
        child: null
      };
      this.setContent(tmpls.dialogs.createRelation.dialog(false));
      this.setButtonSet(goog.ui.Dialog.ButtonSet.OK_CANCEL);
      this.setDraggable(false);
      content = this.getContentElement();
      this.relPrefsForm = goog.dom.getElement('relprefs');
      goog.events.listen(this.relPrefsForm, goog.events.EventType.CHANGE, this.setIdentifying);
      goog.events.listen(this.relPrefsForm, goog.events.EventType.SUBMIT, this.swapParentChild);
      goog.events.listen(this, goog.ui.Dialog.EventType.SELECT, this.onSelect);
    }

    /**
    	* If change type of relation (identifying or non-identifying) then save
    	* actual value
    */


    RelationDialog.prototype.setIdentifying = function(ev) {
      return this.isIdentifying = Boolean(goog.string.toNumber(ev.target.value));
    };

    RelationDialog.prototype.swapParentChild = function(ev) {
      var child, parent, tmp;
      tmp = this.relatedTables.parent;
      this.relatedTables.parent = this.relatedTables.child;
      this.relatedTables.child = tmp;
      parent = goog.dom.getElementByClass('parent', ev.target);
      child = goog.dom.getElementByClass('child', ev.target);
      tmp = goog.dom.getTextContent(parent);
      goog.dom.setTextContent(parent, goog.dom.getTextContent(child));
      goog.dom.setTextContent(child, tmp);
      return ev.preventDefault();
    };

    RelationDialog.prototype.show = function(relation) {
      this.relatedRelation = relation;
      return this.setVisible(true);
    };

    RelationDialog.prototype.onSelect = function(e) {
      var confirmEvent;
      if (e.key !== 'ok') return true;
      confirmEvent = new dm.dialogs.RelationDialog.Confirm(this, this.relatedRelation, this.isIdentifying, this.relatedTables.parent, this.relatedTables.child);
      return this.dispatchEvent(confirmEvent);
    };

    /**
    	* @param {dm.model.Table} parent
    	* @param {dm.model.Table} child
    	* @param {boolean=} ident
    */


    RelationDialog.prototype.setValues = function(parent, child, ident) {
      var values;
      if (ident == null) ident = false;
      values = {
        ident: ident,
        parentTable: parent.getName(),
        childTable: child.getName()
      };
      this.isIdentifying = ident;
      this.relatedTables.parent = dm.actualModel.getTable(parent.id);
      this.relatedTables.child = dm.actualModel.getTable(child.id);
      return goog.soy.renderElement(this.relPrefsForm, tmpls.dialogs.createRelation.prefs, values);
    };

    return RelationDialog;

  })(goog.ui.Dialog);

  dm.dialogs.RelationDialog.Confirm = (function(_super) {

    __extends(Confirm, _super);

    function Confirm(dialog, id, ident, parenttab, childtab) {
      Confirm.__super__.constructor.call(this, dm.dialogs.RelationDialog.EventType.CONFIRM, dialog);
      /**
        * @type {string}
      */

      this.relationId = id;
      /**
        * @type {boolean}
      */

      this.identifying = ident;
      /**
        * @type {string}
      */

      this.parentTable = parenttab;
      /**
        * @type {string}
      */

      this.childTable = childtab;
    }

    return Confirm;

  })(goog.events.Event);

}).call(this);
