// Generated by CoffeeScript 1.6.2
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

goog.provide('dm.ui.ControlPanel');

goog.require('dm.ui.Canvas');

goog.require('goog.dom');

goog.require('goog.dom.classes');

goog.require('goog.events');

goog.require('goog.events.EventType');

goog.require('goog.events.EventTarget');

goog.require('goog.style');

dm.ui.ControlPanel = (function(_super) {
  __extends(ControlPanel, _super);

  /**
   * @constructor
   * @extends {goog.events.EventTarget}
  */


  function ControlPanel() {
    this.createTableFinish = __bind(this.createTableFinish, this);
    this.toolFinished = __bind(this.toolFinished, this);
    this.activateTool = __bind(this.activateTool, this);
    this.onClicked = __bind(this.onClicked, this);    ControlPanel.__super__.constructor.call(this);
  }

  /**
   * @param {!HTMLElement} cp Control panel html element
  */


  ControlPanel.prototype.init = function(cp) {
    var canvas,
      _this = this;

    this.obj = cp;
    canvas = dm.ui.Canvas.getInstance();
    goog.events.listen(this.obj, goog.events.EventType.CLICK, this.onClicked);
    return goog.events.listen(canvas, dm.ui.Canvas.EventType.CLICK, function(ev) {
      if (!_this.activeTool) {
        return false;
      }
      return _this.toolFinished(ev.position, ev.object);
    });
  };

  /**
   * @param {goog.events.Event} e
  */


  ControlPanel.prototype.onClicked = function(e) {
    e.stopPropagation();
    if (goog.dom.classes.has(e.target, 'tool')) {
      return this.activateTool(e.target);
    }
  };

  /**
   * @param {!HTMLElement}
  */


  ControlPanel.prototype.activateTool = function(tool) {
    if (this.activeTool) {
      this.toolFinished();
    }
    if (tool === this.activeTool) {
      return false;
    }
    this.activeTool = tool;
    goog.dom.classes.add(this.activeTool, 'active');
    return this["" + this.activeTool.name + "Init"]();
  };

  /**
   * @param {goog.math.Coordinate=} coord
   * @param {HTMLElement=} object
  */


  ControlPanel.prototype.toolFinished = function(coord, object) {
    if (!this["" + this.activeTool.name + "Finish"](coord, object)) {
      return false;
    }
    goog.dom.classes.remove(this.activeTool, 'active');
    return this.activeTool = void 0;
  };

  ControlPanel.prototype.createTableInit = function() {
    var canvas;

    canvas = dm.ui.Canvas.getInstance();
    return goog.events.listen(canvas.html, goog.events.EventType.MOUSEMOVE, canvas.moveTable);
  };

  ControlPanel.prototype.createRelationInit = function(ev) {
    var canvas;

    canvas = dm.ui.Canvas.getInstance();
    return canvas.html.style.cursor = 'crosshair';
  };

  /**
   * @param {goog.math.Coordinate=} position
   * @param {HTMLElement=} object
  */


  ControlPanel.prototype.createTableFinish = function(position, object) {
    var canvas;

    canvas = dm.ui.Canvas.getInstance();
    if (position) {
      canvas.placeTable(position);
    }
    return goog.events.unlisten(canvas.html, goog.events.EventType.MOUSEMOVE, canvas.moveTable);
  };

  /**
   * @param {goog.math.Coordinate=} position
   * @param {?HTMLElement} object
  */


  ControlPanel.prototype.createRelationFinish = function(position, object) {
    var canvas, mousemove;

    if (!position) {
      return true;
    }
    if (!object) {
      return false;
    }
    canvas = dm.ui.Canvas.getInstance();
    mousemove = goog.events.EventType.MOUSEMOVE;
    if (!canvas.startRelationPath) {
      this.startTabId = object.id;
      canvas.setStartRelationPoint(position);
      goog.events.listen(canvas.html, mousemove, canvas.moveEndRelationPoint);
      return false;
    } else {
      canvas.placeRelation(position, this.startTabId, object.id);
      goog.events.unlisten(canvas.html, mousemove, canvas.moveEndRelationPoint);
      canvas.html.style.cursor = 'default';
      return true;
    }
  };

  return ControlPanel;

})(goog.events.EventTarget);

goog.addSingletonGetter(dm.ui.ControlPanel);

if (typeof window === "undefined" || window === null) {
  module.exports = dm.ui.ControlPanel;
}
