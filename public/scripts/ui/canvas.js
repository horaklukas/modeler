// Generated by IcedCoffeeScript 1.4.0c
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

goog.provide('dm.ui.Canvas');

goog.provide('dm.ui.Canvas.Click');

goog.require('goog.dom');

goog.require('goog.style');

goog.require('goog.events');

goog.require('goog.events.EventTarget');

dm.ui.Canvas = (function(_super) {

  __extends(Canvas, _super);

  /**
   * @constructor
   * @extends {goog.events.EventTarget}
  */


  function Canvas() {
    this.placeRelation = __bind(this.placeRelation, this);
    this.moveEndRelationPoint = __bind(this.moveEndRelationPoint, this);
    this.placeTable = __bind(this.placeTable, this);
    this.moveTable = __bind(this.moveTable, this);
    this.onClick = __bind(this.onClick, this);
    this.onDblClick = __bind(this.onDblClick, this);    Canvas.__super__.constructor.call(this);
  }

  /**
   * @param {string} canvasId Id of element to init canvas on
  */


  Canvas.prototype.init = function(canvasId) {
    var _ref;
    this.html = goog.dom.getElement(canvasId);
    _ref = goog.style.getSize(this.html), this.width = _ref.width, this.height = _ref.height;
    this.svg = Raphael(canvasId, this.width, this.height);
    this.clueTable = this.svg.rect(0, 0, 100, 80, 2);
    this.clueTable.attr({
      fill: '#CCC',
      opacity: 0.5
    }).hide();
    goog.events.listen(this.html, goog.events.EventType.DBLCLICK, this.onDblClick);
    return goog.events.listen(this.html, goog.events.EventType.CLICK, this.onClick);
  };

  /**
   * @param {goog.events.Event} ev
  */


  Canvas.prototype.onDblClick = function(ev) {
    var table;
    table = goog.dom.getAncestorByClass(ev.target, 'table');
    if (table) return this.clickedTable(table);
  };

  /**
   * @param {goog.events.Event} ev
  */


  Canvas.prototype.onClick = function(ev) {
    var clickObj, clickPos;
    clickPos = goog.style.getRelativePosition(ev, ev.currentTarget);
    clickObj = goog.dom.getAncestorByClass(ev.target, 'table');
    return this.dispatchEvent(new dm.ui.Canvas.Click(clickPos, clickObj));
  };

  /**
   * @param {dm.model.Table} table
  */


  Canvas.prototype.clickedTable = function(table) {
    var tab, tid;
    tid = table.id;
    tab = dm.actualModel.getTable(tid);
    dm.tableDialog.show(tid);
    return dm.tableDialog.setValues(tab.getName(), tab.getColumns());
  };

  Canvas.prototype.moveTable = function(ev) {
    var position;
    position = goog.style.getRelativePosition(ev, this.html);
    return this.clueTable.show().attr({
      'x': position.x,
      'y': position.y
    });
  };

  /**
   * @param {goog.math.Coordinate} tabPos
  */


  Canvas.prototype.placeTable = function(tabPos) {
    var id;
    id = dm.actualModel.addTable(this.html, tabPos.x, tabPos.y);
    this.clueTable.hide();
    dm.tableDialog.setValues();
    return dm.tableDialog.show(id);
  };

  /**
   * @param {goog.math.Coordinate} startCoords
  */


  Canvas.prototype.setStartRelationPoint = function(startCoords) {
    this.startRelationPath = "M" + startCoords.x + " " + startCoords.y;
    this.clueRelation = this.svg.path(this.startRelationPath);
    return this.clueRelation.show();
  };

  Canvas.prototype.moveEndRelationPoint = function(ev) {
    var point;
    point = goog.style.getRelativePosition(ev, this.html);
    return this.clueRelation.attr('path', "" + this.startRelationPath + "L" + point.x + " " + point.y);
  };

  Canvas.prototype.placeRelation = function(endCoords) {
    this.clueRelation.hide();
    return this.startRelationPath = void 0;
  };

  return Canvas;

})(goog.events.EventTarget);

dm.ui.Canvas.EventType = {
  CLICK: goog.events.getUniqueId('canvas-click')
};

goog.addSingletonGetter(dm.ui.Canvas);

dm.ui.Canvas.Click = (function(_super) {

  __extends(Click, _super);

  function Click(pos, obj) {
    Click.__super__.constructor.call(this, dm.ui.Canvas.EventType.CLICK, dm.ui.Canvas.getInstance());
    /**
      * @type {goog.math.Coordinate}
    */

    this.position = pos;
    /**
      * @type {?HTMLElement}
    */

    this.object = obj;
  }

  return Click;

})(goog.events.Event);
